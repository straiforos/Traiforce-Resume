// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@use '@angular/material' as mat;
@use 'sass:map';
@use 'styles/button-overrides' as button;
@use 'styles/chip-overrides' as chip;
@use 'styles/card-overrides' as card;
@use 'styles_theme-colors' as theme-colors;

// Include the common styles for Angular Material
@include mat.core();

// Create the M3 theme
$theme: mat.define-theme((
  color: (
    theme-type: dark,
    primary: theme-colors.$primary-palette,
    tertiary: theme-colors.$tertiary-palette
  ),
  typography: (
    plain-family: Roboto,
    brand-family: Roboto,
    bold-weight: 700,
    medium-weight: 500,
    regular-weight: 400
  ),
  density: (
    scale: 0
  )
));

// Wrap component theme includes in html selector as required by M3
html {
  // Apply the theme to all components
  @include mat.all-component-themes($theme);

  // Add backwards compatibility for color variants if needed
  @include mat.color-variants-backwards-compatibility($theme);

  // Apply custom component overrides
  @include button.apply-button-overrides($theme);
  @include chip.apply-chip-overrides($theme);
  @include card.apply-card-overrides($theme);
}

// Define CSS custom properties for use in components
:root {
  // Theme colors using M3 color tokens
  --md-sys-color-primary: #{mat.get-theme-color($theme, primary, 40)};
  --md-sys-color-primary-container: #{mat.get-theme-color($theme, primary, 90)};
  --md-sys-color-on-primary: #{mat.get-theme-color($theme, primary, 100)};
  --md-sys-color-on-primary-container: #{mat.get-theme-color($theme, primary, 10)};

  --md-sys-color-tertiary: #{mat.get-theme-color($theme, tertiary, 40)};
  --md-sys-color-tertiary-container: #{mat.get-theme-color($theme, tertiary, 90)};
  --md-sys-color-on-tertiary: #{mat.get-theme-color($theme, tertiary, 100)};
  --md-sys-color-on-tertiary-container: #{mat.get-theme-color($theme, tertiary, 10)};

  --md-sys-color-surface: #{mat.get-theme-color($theme, surface)};
  --md-sys-color-surface-dim: #{mat.get-theme-color($theme, surface-dim)};
  --md-sys-color-surface-bright: #{mat.get-theme-color($theme, surface-bright)};
  --md-sys-color-surface-container: #{mat.get-theme-color($theme, surface-container)};
  --md-sys-color-surface-container-low: #{mat.get-theme-color($theme, surface-container-low)};
  --md-sys-color-surface-container-high: #{mat.get-theme-color($theme, surface-container-high)};
  --md-sys-color-surface-container-highest: #{mat.get-theme-color($theme, surface-container-highest)};

  --md-sys-color-on-surface: #{mat.get-theme-color($theme, on-surface)};
  --md-sys-color-on-surface-variant: #{mat.get-theme-color($theme, on-surface-variant)};
  --md-sys-color-outline: #{mat.get-theme-color($theme, outline)};
  --md-sys-color-outline-variant: #{mat.get-theme-color($theme, outline-variant)};
}

// Global text styles
body {
  color: var(--md-sys-color-on-surface);
  background-color: var(--md-sys-color-surface);
  margin: 0;
  font-family: var(--md-sys-typescale-body-large-font);
}

h1, h2, h3, h4, h5, h6 {
  color: var(--md-sys-color-on-surface);
  margin: 0;
}

p {
  color: var(--md-sys-color-on-surface);
  margin: 0;
}

a {
  color: var(--md-sys-color-primary);
  text-decoration: none;

  &:hover {
    color: var(--md-sys-color-primary-container);
  }
}

.text-secondary {
  color: var(--md-sys-color-on-surface-variant);
}

.divider {
  background-color: var(--md-sys-color-outline-variant);
}

.icon {
  color: var(--md-sys-color-on-surface-variant);
}
